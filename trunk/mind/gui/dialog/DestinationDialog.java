/*
 * Copyright 2001:
 * Peter Andersson <petan117@student.liu.se>
 * Martin Hagman <marha189@student.liu.se>
 * Henrik Norin <henno776@student.liu.se>
 * Anna Stjerneby <annst566@student.liu.se>
 * Tim Terlegård <timte878@student.liu.se>
 * Johan Trygg <johtr599@student.liu.se>
 * Peter Åstrand <petas096@student.liu.se>
 * 
 * Copyright 2007:
 * Per Fredriksson <perfr775@student.liu.se>
 * David Karlslätt <davka417@student.liu.se>
 * Tor Knutsson	<torkn754@student.liu.se>
 * Daniel Källming <danka053@student.liu.se>
 * Ted Palmgren <tedpa175@student.liu.se>
 * Freddie Pintar <frepi150@student.liu.se>
 * Mårten Thurén <marth852@student.liu.se>
 *
 * This file is part of reMIND.
 *
 * reMIND is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * reMIND is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with reMIND; if not, write to the Free Software Foundation,
 * Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */
package mind.gui.dialog;

import java.awt.*;
import javax.swing.*;
import java.util.Vector;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;

import mind.gui.*;
import mind.model.*;
import mind.model.function.*;

/*
 * DestinationDialog.java
 *
 * Created on den 25 april 2001, 13:02
 */

/**
 *
 * @author Tim Terlegård
 * @version 2001-05-18
 */

public class DestinationDialog extends mind.gui.dialog.FunctionDialog {
    private ID c_nodeID;
    private String c_functionLabel;
    private Vector c_resources;
    private GUI c_gui;
    private Destination c_function;

    /** Creates new form DestinationDialog */
    public DestinationDialog(JDialog parent, boolean modal, ID nodeID,
			NodeFunction function, GUI gui) {
	super (parent, modal);
	c_nodeID = nodeID;
	c_gui = gui;
	c_function = (Destination) function;

	initComponents ();
	txtLabel.setText(c_function.getLabel());
	updateResources();
	pack();pack();
    }

    private void updateResources()
    {
	ID resourceID;

	c_resources = c_gui.getResources();
	listResource.setListData(c_resources);
	if (c_function.getResource() != null)
	    listResource.setSelectedIndex(
                  c_resources.indexOf(c_gui.getResource(c_function.getResource())));

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */

    private void initComponents () {
	lblDescription1 = new javax.swing.JLabel();
	lblDescription2 = new javax.swing.JLabel();
	lblDescription3 = new javax.swing.JLabel();
	sep1 = new javax.swing.JSeparator ();
	sep2 = new javax.swing.JSeparator ();
	pnlTimestep = new javax.swing.JPanel ();
	pnlCopyPaste = new javax.swing.JPanel ();
	btnCopyFrom = new javax.swing.JButton ();
	btnCopy = new javax.swing.JButton ();
	btnPasteTo = new javax.swing.JButton ();
	btnPaste = new javax.swing.JButton ();
	lblTimestep = new javax.swing.JLabel ();
	pnlLabel = new javax.swing.JPanel ();
	lblLabel = new javax.swing.JLabel ();
	txtLabel = new javax.swing.JTextField ();
	sep3 = new javax.swing.JSeparator ();
	pnlButtons = new javax.swing.JPanel ();
	btnOk = new javax.swing.JButton ();
	btnCancel = new javax.swing.JButton ();
	pnlResource = new javax.swing.JPanel ();
	lblTypeResource = new javax.swing.JLabel ();
	listResource = new javax.swing.JList ();
	btnNewResource = new javax.swing.JButton ();
	getContentPane ().setLayout (new java.awt.GridBagLayout ());
	java.awt.GridBagConstraints gridBagConstraints1;
	setName ("Destination");
	addWindowListener (new java.awt.event.WindowAdapter () {
		public void windowClosing (java.awt.event.WindowEvent evt) {
		    closeDialog (evt);
		}
	    }
			   );

	lblDescription1.setText("Description: Destination is a function " +
				"that works as");
	lblDescription2.setText("a sink for a resource. Together with a " +
				"boundary it is a part");
	lblDescription3.setText("of the goal function.");

	gridBagConstraints1 = new java.awt.GridBagConstraints ();
	gridBagConstraints1.gridwidth = 2;
	gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
	gridBagConstraints1.insets = new java.awt.Insets (10, 10, 0, 10);
	gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
	getContentPane ().add (lblDescription1, gridBagConstraints1);
	gridBagConstraints1.gridy = 1;
	gridBagConstraints1.insets = new java.awt.Insets (0, 10, 0, 10);
	getContentPane ().add (lblDescription2, gridBagConstraints1);
	gridBagConstraints1.gridy = 2;
	gridBagConstraints1.insets = new java.awt.Insets (0, 10, 10, 10);
	getContentPane ().add (lblDescription3, gridBagConstraints1);

	gridBagConstraints1 = new java.awt.GridBagConstraints ();
	gridBagConstraints1.gridx = 0;
	gridBagConstraints1.gridy = 3;
	gridBagConstraints1.gridwidth = 2;
	gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
	getContentPane ().add (sep1, gridBagConstraints1);

	pnlLabel.setLayout (new java.awt.GridBagLayout ());
	lblLabel.setText ("Label");

	GridBagConstraints gridBagConstraints5 = new GridBagConstraints ();
	//gridBagConstraints5.insets = new java.awt.Insets (10, 10, 10, 10);
	gridBagConstraints5.anchor = java.awt.GridBagConstraints.WEST;
	pnlLabel.add (lblLabel, gridBagConstraints5);

	gridBagConstraints5 = new java.awt.GridBagConstraints ();
	gridBagConstraints5.fill = java.awt.GridBagConstraints.HORIZONTAL;
	gridBagConstraints5.insets = new java.awt.Insets (0, 10, 0, 0);
	gridBagConstraints5.anchor = java.awt.GridBagConstraints.WEST;
	gridBagConstraints5.weightx = 1.0;
	pnlLabel.add (txtLabel, gridBagConstraints5);

	gridBagConstraints1 = new java.awt.GridBagConstraints ();
	gridBagConstraints1.insets = new java.awt.Insets (10, 10, 10, 10);
	gridBagConstraints1.gridx = 0;
	gridBagConstraints1.gridy = 4;
	gridBagConstraints1.gridwidth = 2;
	gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
	gridBagConstraints1.insets = new java.awt.Insets (10, 10, 10, 10);
	gridBagConstraints1.weightx = 1.0;
	getContentPane ().add (pnlLabel, gridBagConstraints1);

	gridBagConstraints1 = new java.awt.GridBagConstraints ();
	//	gridBagConstraints1.gridy = 3;
	gridBagConstraints1.gridwidth = 2;
	gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
	getContentPane ().add (sep2, gridBagConstraints1);

	pnlTimestep.setLayout (new java.awt.GridBagLayout ());
	java.awt.GridBagConstraints gridBagConstraints2 =
	    new GridBagConstraints();

	//A destination function doesn't use timesteps...
/*
	lblTimestep.setText ("Timesteps:");
	pnlTimestep.add(lblTimestep, gridBagConstraints2);

	gridBagConstraints1 = new java.awt.GridBagConstraints ();
	gridBagConstraints1.gridx = 0;
	gridBagConstraints1.gridy = 6;
	gridBagConstraints1.insets = new java.awt.Insets (10, 10, 10, 5);
	gridBagConstraints1.anchor = java.awt.GridBagConstraints.NORTHWEST;
	getContentPane ().add (pnlTimestep, gridBagConstraints1);

	pnlCopyPaste.setLayout (new java.awt.GridBagLayout ());
	java.awt.GridBagConstraints gridBagConstraints3;

	btnCopyFrom.setEnabled(false);
	btnCopyFrom.setText ("Copy from range");
	btnCopyFrom.addActionListener (new java.awt.event.ActionListener () {
		public void actionPerformed (java.awt.event.ActionEvent evt) {
		    btnCopyFromActionPerforme (evt);
		    copyFromRange (evt);
          btnCopyFromActionPerformed (evt);
		}
	    });

       	gridBagConstraints3 = new java.awt.GridBagConstraints ();
	//gridBagConstraints3.insets = new java.awt.Insets (10, 10, 10, 10);
	pnlCopyPaste.add (btnCopyFrom, gridBagConstraints3);

	btnCopy.setEnabled(false);
	btnCopy.setPreferredSize (new java.awt.Dimension(85, 27));
	btnCopy.setText ("Copy");
	btnCopy.addActionListener (new java.awt.event.ActionListener () {
		public void actionPerformed (java.awt.event.ActionEvent evt) {
		    btnCopyActionPerformed (evt);
		}
	    });

	gridBagConstraints3 = new java.awt.GridBagConstraints ();
	gridBagConstraints3.insets = new java.awt.Insets (10, 10, 10, 10);
	pnlCopyPaste.add (btnCopy, gridBagConstraints3);

	btnPasteTo.setEnabled(false);
	btnPasteTo.setPreferredSize (new java.awt.Dimension(117, 27));
	btnPasteTo.setText ("Paste to range");
	btnPasteTo.addActionListener (new java.awt.event.ActionListener () {
		public void actionPerformed (java.awt.event.ActionEvent evt) {
		    btnPasteToRangeActionPerformed (evt);
		}
	    });

	gridBagConstraints3 = new java.awt.GridBagConstraints ();
	gridBagConstraints3.gridx = 0;
	//	gridBagConstraints3.insets = new java.awt.Insets (10, 10, 10, 10);
	pnlCopyPaste.add (btnPasteTo, gridBagConstraints3);

	btnPaste.setEnabled(false);
	btnPaste.setPreferredSize (new java.awt.Dimension(85, 27));
	btnPaste.setText ("Paste");
	btnPaste.addActionListener (new java.awt.event.ActionListener () {
		public void actionPerformed (java.awt.event.ActionEvent evt) {
		    btnPasteActionPerformed (evt);
		}
	    });

	gridBagConstraints3 = new java.awt.GridBagConstraints ();
	gridBagConstraints3.gridx = 1;
	//	gridBagConstraints3.insets = new java.awt.Insets (10, 10, 10, 10);
	pnlCopyPaste.add (btnPaste, gridBagConstraints3);

	gridBagConstraints1 = new java.awt.GridBagConstraints ();
	gridBagConstraints1.gridx = 1;
	gridBagConstraints1.gridy = 6;
	gridBagConstraints1.insets = new java.awt.Insets (0, 6, 0, 10);
	gridBagConstraints1.anchor = java.awt.GridBagConstraints.NORTHWEST;
	getContentPane ().add (pnlCopyPaste, gridBagConstraints1);

*/
      pnlResource.setLayout (new java.awt.GridBagLayout ());
      java.awt.GridBagConstraints gridBagConstraints4;
      lblTypeResource.setText ("Type of resource:");

      gridBagConstraints4 = new java.awt.GridBagConstraints ();
      //      gridBagConstraints4.insets = new java.awt.Insets (10, 10, 0, 10);
      gridBagConstraints4.fill = GridBagConstraints.HORIZONTAL;
      gridBagConstraints4.anchor = GridBagConstraints.CENTER;
      pnlResource.add (lblTypeResource, gridBagConstraints4);


      gridBagConstraints4 = new java.awt.GridBagConstraints ();
      gridBagConstraints4.gridx = 0;
      //      gridBagConstraints4.insets = new java.awt.Insets (4, 10, 9, 10);

      JScrollPane scrollPane = new JScrollPane(listResource);
      scrollPane.setPreferredSize(new Dimension(150, 100));
      pnlResource.add (scrollPane, gridBagConstraints4);

/*
      //Do we really want to be able to create resources from inside this dialog?
      //If we can, a created resource should be deleted when selecting cancel.

      btnNewResource.setText ("New Resource...");
      btnNewResource.addActionListener (new java.awt.event.ActionListener () {
	      public void actionPerformed (java.awt.event.ActionEvent evt) {
		  btnNewResourceActionPerformed (evt);
	      }
	  });

      gridBagConstraints4 = new java.awt.GridBagConstraints ();
      gridBagConstraints4.gridx = 0;
      //      gridBagConstraints4.insets = new java.awt.Insets (5, 10, 10, 10);
      pnlResource.add (btnNewResource, gridBagConstraints4);
*/

      gridBagConstraints1 = new java.awt.GridBagConstraints ();
      gridBagConstraints1.gridx = 0;
      gridBagConstraints1.gridy = 8;
      gridBagConstraints1.weighty = 1.0;
      gridBagConstraints1.insets = new java.awt.Insets (10, 10, 10, 5);
      getContentPane ().add (pnlResource, gridBagConstraints1);

      gridBagConstraints1 = new java.awt.GridBagConstraints ();
      gridBagConstraints1.gridy = 9;
      gridBagConstraints1.gridwidth = 2;
      gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
      getContentPane ().add (sep3, gridBagConstraints1);


	btnOk.setText ("OK");
	getRootPane().setDefaultButton(btnOk);
	btnOk.addActionListener (new java.awt.event.ActionListener () {
		public void actionPerformed (java.awt.event.ActionEvent evt) {
		    btnOkActionPerformed (evt);
		}
	    });

	pnlButtons.add (btnOk);

	btnCancel.setText ("Cancel");
	btnCancel.addActionListener (new java.awt.event.ActionListener () {
		public void actionPerformed (java.awt.event.ActionEvent evt) {
		    btnCancelActionPerformed (evt);
		}
	    });

      pnlButtons.add (btnCancel);

      gridBagConstraints1 = new java.awt.GridBagConstraints ();
      gridBagConstraints1.gridx = 0;
      gridBagConstraints1.gridy = 10;
      gridBagConstraints1.gridwidth = 2;
      gridBagConstraints1.insets = new java.awt.Insets (10, 10, 10, 10);
      gridBagConstraints1.anchor = java.awt.GridBagConstraints.EAST;
      getContentPane ().add (pnlButtons, gridBagConstraints1);
  }

  private void btnCancelActionPerformed (java.awt.event.ActionEvent evt) {
    setVisible(false);
    dispose();
  }

  private void btnOkActionPerformed (java.awt.event.ActionEvent evt) {
      Resource resource;

      // save the function label
      c_function.setLabel(txtLabel.getText());

      int index = listResource.getSelectedIndex();
      if (index != -1) {
	  resource = (Resource) c_resources.elementAt(index);
	  c_function.setResource(resource.getID());
      }

      // close the dialog
      closeDialog(null);
  }

/*
  private void btnNewResourceActionPerformed (java.awt.event.ActionEvent evt) {
      // show dialog for making new resource
      JDialog dialog = new NewResourceDialog(this, true, c_gui);

      int height = getLocation().y + getSize().height/2;
      int width = getLocation().x + getSize().width/2;
      int x = (int) (width - dialog.getSize().width/2);
      int y = (int) (height - dialog.getSize().height/2);
      dialog.setLocation(x, y);
      dialog.show();

      // update the resource list
      updateResources();
  }
*/

  private void btnPasteActionPerformed (java.awt.event.ActionEvent evt) {
// Add your handling code here:
  }

  private void btnCopyActionPerformed (java.awt.event.ActionEvent evt) {
// Add your handling code here:
  }

  private void btnPasteToRangeActionPerformed (java.awt.event.ActionEvent evt) {
// Add your handling code here:
  }
  private void btnCopyFromActionPerformed (java.awt.event.ActionEvent evt) {
// Add your handling code here:
  }

  private void copyFromRange (java.awt.event.ActionEvent evt) {
// Add your handling code here:
  }

  private void btnCopyFromActionPerforme (java.awt.event.ActionEvent evt) {

    // Add your handling code here:
  }

  /** Closes the dialog */
  private void closeDialog(java.awt.event.WindowEvent evt) {
    setVisible (false);
    dispose ();
  }


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel lblDescription1;
  private javax.swing.JLabel lblDescription2;
  private javax.swing.JLabel lblDescription3;
  private javax.swing.JSeparator sep1;
  private javax.swing.JSeparator sep2;
  private javax.swing.JPanel pnlTimestep;
  private javax.swing.JPanel pnlCopyPaste;
  private javax.swing.JButton btnCopyFrom;
  private javax.swing.JButton btnCopy;
  private javax.swing.JButton btnPasteTo;
  private javax.swing.JButton btnPaste;
  private javax.swing.JLabel lblTimestep;
  private javax.swing.JPanel pnlLabel;
  private javax.swing.JLabel lblLabel;
  private javax.swing.JTextField txtLabel;
  private javax.swing.JSeparator sep3;
  private javax.swing.JPanel pnlButtons;
  private javax.swing.JButton btnOk;
  private javax.swing.JButton btnCancel;
  private javax.swing.JPanel pnlResource;
  private javax.swing.JLabel lblTypeResource;
  private javax.swing.JList listResource;
  private javax.swing.JButton btnNewResource;
  // End of variables declaration//GEN-END:variables

}
